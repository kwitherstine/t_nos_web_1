---
- name: Add Grafana rpm key
  rpm_key:
    key: https://packagecloud.io/grafana/stable/gpgkey
    state: present

- name: Add repo
  yum_repository:
    name: grafana
    description: grafana yum repo
    baseurl: https://packagecloud.io/grafana/stable/el/7
    gpgcheck: 0

- name: Install grafana
  yum: name=grafana state=present

- name: Configure grafana service
  service:
    name: grafana-server
    state: started
    enabled: yes

# Wait for Grafana to start
- wait_for:
    port: 3000

# 200 is returned when a new key is created
# 500 is returned when the key already exists.
# 500 is considered okay for idempotency
- name: Generate URI Key
  uri:
    url: "http://localhost:3000/api/auth/keys/"
    body: "name=ansible_key&role=Admin"
    user: admin
    password: admin
    force_basic_auth: yes
    method: POST
    status_code: 200, 500
  register: webpage

# Since 500 is success, but no new key is provided
# Only run this if the REST call returned 200
- name: Record URI key as local var
  lineinfile:
    dest: roles/mgmt/vars/main.yml
    regexp: "api_key:"
    line: "  api_key: \"{{webpage.json.key}}\""
  delegate_to: localhost
  become: false
  when: webpage.status == 200

# When the API key is set in the vars file the first time
# we don't have knowledge of it in this playbook yet.
# This sets a temporary fact to use for the rest of the play
- name: Set API Key
  set_fact:
    grafana: {api_key: "{{webpage.json.key}}"}
  when: webpage.status == 200


# Status 500 is reported if the datasource is added a second time
- name: Add influxdb datasource
  uri:
    url: "http://localhost:3000/api/datasources"
    HEADER_Authorization: "Bearer {{grafana.api_key}}"
    body:
      name: "influx"
      type: "influxdb"
      url: "http://localhost:8086"
      access: "proxy"
      database: "network"
      isDefault: True
      user: "admin"
      password: "admin"
    body_format: json
    method: POST
    status_code: 200, 500

# - name: Add single dashboard
#   uri:
#     url: "http://localhost:3000/api/dashboards/db"
#     method: POST
#     body_format: raw
#     HEADER_Authorization: "Bearer {{ grafana.api_key}}"
#     HEADER_Content-Type: "application/json"
#     body: "{{ lookup('file', 'roles/servers/files/updated_dashboard.json') }}"


# If the dashboard loads, but the data source can not be found
# edit the json file, looking for "influx" and replace it
# with "influx". Grafana's added this in 3.1 and it doesn't
# seem to work properly.
#
# Also note any dashboard exported from Grafana must add
# {
#  "dashboard":
# to the beginning of the file (with a closing } at the end)
#
- name: Add main dashboard
  uri:
    url: "http://localhost:3000/api/dashboards/db"
    method: POST
    # For dashboards build before Grafana 3.1, change this to
    # body_format: raw
    body_format: json
    HEADER_Authorization: "Bearer {{ grafana.api_key }}"
    HEADER_Content-Type: "application/json"
    body: "{{ lookup('file', 'dashboards/datacenter_fabric.json') }}"
  ignore_errors: yes
